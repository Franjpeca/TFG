run_id: "001" # Representa ejecucion global

# Sirve como identificador, por eso solo se toman de los dataset de train
dataset_names:
  46014: "46014_train_ordinal"
  46025: "46025_train_ordinal"
  46042: "46042_train_ordinal"
  46053: "46053_train_ordinal"
  46069: "46069_train_ordinal"

preprocessing:
  drop_penultimate: true
  drop_empty_cols: true
  drop_duplicates: true
  drop_constant_cols: true


training_datasets:
  - cleaned_46014_train_ordinal
  - cleaned_46025_train_ordinal
  - cleaned_46042_train_ordinal
  - cleaned_46053_train_ordinal
  - cleaned_46069_train_ordinal
  
test_datasets:
  - cleaned_46014_test_ordinal
  - cleaned_46025_test_ordinal
  - cleaned_46042_test_ordinal
  - cleaned_46053_test_ordinal
  - cleaned_46069_test_ordinal

cv_settings:
  n_splits: 2
  shuffle: true
  random_state: 32


model_parameters:
  # =========================
  # Baselines (referencia)
  # =========================
  LinearRegression:
    grid_001:
      param_grid:
        fit_intercept: [True]
        positive: [False]   # baseline simple y estable

  DecisionTreeRegressor:
    grid_001:
      param_grid:
        max_depth: [5, 10]
        min_samples_split: [2, 5]   # 4 combos

  KNeighborsClassifier:
    grid_001:
      param_grid:
        n_neighbors: [3, 5, 7, 9]
        weights: ["uniform", "distance"]
        p: [1, 2]   # 16 combos

  # =========================
  # MORD (modelos ordinales)
  # =========================
  LogisticAT:
    grid_001:
      param_grid:
        alpha: [0.01, 0.1, 1.0, 10.0]
        max_iter: [1000]   # 4 combos

  LogisticIT:
    grid_001:
      param_grid:
        alpha: [0.01, 0.1, 1.0, 10.0]
        max_iter: [1000]   # 4 combos

  LAD:
    grid_001:
      param_grid:
        C: [0.01, 0.1, 1.0, 10.0]
        max_iter: [30000]  # subir iteraciones para evitar ConvergenceWarning

  OrdinalRidge:
    grid_001:
      param_grid:
        alpha: [0.01, 0.1, 1.0, 10.0]
        max_iter: [1000]   # 4 combos

  # =========================
  # ORCA (modelos ordinales)
  # =========================
  NNOP:
    grid_001:
      param_grid:
        hiddenN: [8, 16]                # más pequeño para evitar acumulaciones
        lambdaValue: [0.01, 0.1, 1.0]   # regularización más fuerte
        iterations: [800]
        epsilonInit: [0.001, 0.005]     # evita overflow en sigmoides

  NNPOM:
    grid_001:
      param_grid:
        hiddenN: [8, 16, 32]
        lambdaValue: [0.001, 0.01, 0.1]
        iterations: [500, 800]
        epsilonInit: [0.01, 0.05]    # evita log(0) y divisiones por 0

  OrdinalDecomposition:
    grid_001:
      param_grid:
        base_classifier:
          - "sklearn.linear_model.LogisticRegression"
        parameters:
          - {max_iter: 1000, C: 1.0}    # referencia estable (1 combo)

  REDSVM:
    grid_001:
      param_grid:
        c: [0.1, 1.0, 10.0]
        t: [0]
        d: [2]
        g: [0.001, 0.01]
        r: [0.0]
        e: [0.01]
        h: [0]
        m: [128]             # 6 combos

  SVOREX:
    grid_001:
      param_grid:
        c: [0.1, 1.0, 10.0]
        kernel_type: [0, 2]   # 0: linear, 2: RBF
        k: [1.0]
        p: [2, 3]
        t: [0.001, 0.01]






#model_parameters:
##
#  LinearRegression:
#    grid_001:
#      param_grid:
#        fit_intercept: [True]
#        positive: [False]
#
#    grid_002:
#      param_grid:
#        fit_intercept: [True]
#        positive: [True]
##
#  DecisionTreeRegressor:
#    grid_001:
#      param_grid:
#        max_depth: [3, 5, 10]
#        min_samples_split: [2, 5]
#
#    grid_002:
#      param_grid:
#        max_depth: [15]
#        min_samples_split: [2, 5]
##
#  KNeighborsClassifier:
#    grid_001:
#      param_grid:
#        n_neighbors: [3, 5]
#        weights: ["uniform"]
#        p: [2]  # distancia euclídea
#
#    grid_002:
#      param_grid:
#        n_neighbors: [3, 7, 11]
#        weights: ["uniform", "distance"]
#        p: [1, 2]  # manhattan y euclídea
##
#  LogisticAT:
#    grid_001: # Representa combinacion de parametros
#      param_grid:
#        alpha: [0.1]
#        max_iter: [500]
#
#    grid_002: # Representa combinacion de parametros
#      param_grid:
#        alpha: [0.5]
#        max_iter: [1000]
##
#  LAD:
#    grid_001:
#      param_grid:
#        C: [0.001]
#        max_iter: [30000]
#
#    grid_002:
#      param_grid:
#        C: [0.02]
#        max_iter: [30000]
##
#  LogisticIT:
#    grid_001:
#      param_grid:
#        alpha: [0.001]
#        max_iter: [1000]
#
#    grid_003:
#      param_grid:
#        alpha: [0.001]
#        max_iter: [2000]
##
#  OrdinalRidge:
#    grid_001:
#      param_grid:
#        alpha: [0.001, 5]
#        max_iter: [1000]
#    
#    grid_002:
#      param_grid:
#        alpha: [0.001, 3]
#        max_iter: [2000]
##
#  NNOP:
#    grid_001:
#      param_grid:
#        hiddenN: [8, 16]
#        lambdaValue: [0.01, 0.1, 1.0]
#        iterations: [200, 500]
#        epsilonInit: [0.005, 0.01]
#
#    grid_002:
#      param_grid:
#        hiddenN: [8]
#        lambdaValue: [0.01]
#        iterations: [200]
#        epsilonInit: [0.01]
##
#  NNPOM:
#    grid_001:
#      param_grid:
#        hiddenN: [8, 16, 32]
#        lambdaValue: [0.001, 0.01, 0.1]
#        iterations: [500, 800]
#        epsilonInit: [0.01, 0.05]
#    
#    grid_002:
#      param_grid:
#        hiddenN: [8]
#        lambdaValue: [0.001]
#        iterations: [500]
#        epsilonInit: [0.05]
##
#  OrdinalDecomposition:
#    grid_001:
#      param_grid:
#        base_classifier:
#          - "sklearn.linear_model.LogisticRegression"
#        parameters:
#          - {max_iter: 1000, C: 1.0}
#    
#    grid_002:
#      param_grid:
#        base_classifier:
#          - "sklearn.linear_model.LogisticRegression"
#        parameters:
#          - {max_iter: 1100, C: 1.0}
##
#  REDSVM:
#    grid_001:
#      param_grid:
#        c: [0.1]
#        t: [0]
#        d: [2]         
#        g: [0.001]     
#        r: [0.0]
#        e: [0.01]
#        h: [0]
#        m: [128]
#    
#    grid_002:
#      param_grid:
#        c: [0.2]
#        t: [0]
#        d: [2]         
#        g: [0.003]     
#        r: [0.0]
#        e: [0.03]
#        h: [0]
#        m: [128]
##
#  SVOREX:
#    grid_001:
#      param_grid:
#        c: [0.1, 1]
#        kernel_type: [0, 2]
#        k: [0.5, 1.0]
#        p: [2, 3]
#        t: [0.001, 0.01]
#
#    grid_002:
#      param_grid:
#        c: [0.1, 1]
#        kernel_type: [0]
#        k: [0.5, 1.4]
#        p: [2]
#        t: [0.001, 0.01]
##